@@@@MAIN DIFFERENCES TO ORIGINAL SYSTEM@@@@@


@If while reading from a file an erroneous score (a draw) has
been encountered, the system should process the rest of the match scores in the file and ask the
user to input the correct score manually.@ 

@A player can withdraw at any point in the match (due
to injury). In that case a win of 3 sets to 2 sets (men) or 2 sets to 1 (women) will be recorded to the
credit of the non-withdrawing player. One way for handling this is that if an incomplete score is
encountered the user will be asked to verify if the score is valid due to a player having withdrawn
due to injury. If such is the case, the withdrawn player will be marked as a loser for this match.@[Done (I think)]

FOR THESE FIRST TWO POINTS, CHANGE runRound IN tennisTools.
	EXAMPLE: "Has a player withdrawn(y/n)?"
 		IF 'y'
			'Was it player A?(y/n)'
				IF 'y'
					playerA score = 2
					playerB score = 3
				ELSE
					playerA score = 3
					playerB score = 2
		ELSE
			Manual re-entry, with limitations (if playerA = 3, playerB must be less than 3. 
							   if playerA < 3, playerB must be 3)


@The system will have to allow a user to switch between results entry modes between rounds of a
tournament.@[DONE (i think)]

@Actual scores have to be processed for each match. The scores will determine the number of points
won by a player.
If a male player wins by 3 sets to 0 then the base points awarded for that round must be multiplied
by a factor of 2.5
If a male player wins by 3 sets to 1 then the based points awarded for that round must be multiplied
by a factor of 1.5
There is no bonus factor for a 3 sets to 2 win.
In the ladies tournaments, a win by 2 sets to 0 will yield a bonus factor of 2.5 by which the base
points awarded for that round must be multiplied.
@


PERHAPS A LIST WITH CurrentWinners, PLUS A WIN MARGIN column (3-0 == 3, 3-1 = 2, 3-2 = 0). As ranking is done by round,
this list could be compared (or a new version of currentWinners with the extra coloumn?) at insert point in mini-stack
in update rank functions. Call it currentWinnersScoreMArgin

EXAMPLE: (Only one scoreMod for females, at 2 set margin. Same mod as male twoSetMArgin + 1)

	if gender == 'f':
        	nameOfFillFile = 'parameters\FEMALE_PLAYER_LIST.csv'
        	tempTornementFile = 'playerStates\TEMP_TORNEMENT_FEMALE.csv'
		genderMod = 1
    	elif gender == 'm':
        	nameOfFillFile = 'parameters\MALE_PLAYER_LIST.csv'
        	tempTornementFile = 'playerStates\TEMP_TORNEMENT_MALE.csv'
		genderMod = 0
	
	
	threeSetMargin = 2.5
	twoSetMargin = 1.5

THEN UPDATED AT UPDATE STACK (NOTE: scoreMod might not need to be set in each elif statement. Maybe just at top)

	if currentWinners[j] == tempDataList[i][0]:
		if currentWinnersScoreMArgin[j] = 3
			scoreMod = threeSetMargin
		elif currentWinnersScoreMArgin[j] = 2
			scoreMod = twoSetMargin + genderMod
		
                tempScore = int(tempDataList[i][1])
                tempDataList[i].insert(1, tempScore + (rankPoints * scoreMod))
                tempDataList[i].pop(2)



@The software must save all scores in a repository, to allow for wins or losses for an individual player
to be processed. For example the system might be required to produce the number of wins by a
score of 3 sets to 1 that have been achieved by a specific player at that point in time in the season@


@Task 3 – Design (pseudo code) relevant algorithms that will allow you to show the user the following.
1 The number of wins for a player with a particular score – either in a specific
tournament, or overall for the season.
2 The percentage wins of a player in a specific tournament or for a whole season.
3 Show the player with most wins in the season so far.
4 Show the player with most loses in the season so far.
Task 4 – Implement the design shown in Task 3.@

THESE TWO MIGHT BE BEST DONE TOGETHER. PROBABLY HAVE A PLAYER STATISTICS FILE. 
'MP01', overallRankPoints, OverallPrizeMoney, NumberOFGamesWon, NumberOfGamesLost, threeSetMarginWins, twoSetMarginWins

for 1: to display 3-0 wins: display threeSetWins. to display 3-1 wins: display twoSetWins, to display 3-2 wins: NumbergamesWon - (twoSet + threeSet)
for 2: (numWins / (numWins + numLosses)) * 100
for 3: Find max, or quickSort and select top
for 4: Find min, or quickSort and select bottom

find min and max = O(n), quickSort = 

@@@@SEEDING@@@
PROBABLY NEED EXTRA .PY FILE FOR SEASON SPECIFIC FUNCTIONS/LOGIC

POSSIBLY GIVE OPTION TO START A NEW/SELECT OLD 'WORLD', SO SEASONS CAN BE STORED IN SEQUENCE, WITHIN THAT WORLD. CAN USE OS.LISTDIR('PATH') TO SEARCH directory.

player pairings will be governed by player seedings.
The final placements (based on ranking points earned) from the previous season will be used to
create the first round pairs for each tournament.

1.The first sixteen in a season cannot play each other
in the first round of the tournament.

2.Once in the second round of a tournament, player seedings will
be based on the relevant positions achieved in the same tournament during the previous season.

 So
3,those that have played in the last eight in the previous season of the same tournament cannot face
	each other in the round of the last sixteen players in the new season, 
4.those that have reached the semi-finals in the previous season cannot play each other in the last eight round and 
5.finally those that have reached the final in the previous season cannot play each other in the semi-finals. 

(?)The points’ difficulty factor (for the tournament) will only be applied if a player has at least achieved
the same position as per the previous season in the same tournament. (?)

Need to save: previous player position in same tornement of previous season. 
Need to save: overall position from previous season. (overallPrevious) 
(possibly in 'WORLD.csv' if i go with that idea)

POINTS DIFFICULTY PROBLEM PER SEASON: 

Generate Temp_file for each round of a tornement (over written every season). List of players, and what round they got to 
(example for TAC1_: ['MPO3', 4], ['MP06',2](second value = previousTornRoundNumber)).

	Compare this list with list of CurrentWinners.
		when adding points IF roundNumber < previousTornRoundNumber
			 rankPoints / difficultyPoints  (As rankPoints multiplied by difficultyPoints each round before assignment)  

SEEDING PROBLEM PER SEASON:
	PER TORNEMENT:
	
	FIRST ROUND: 
		First 16 players from overallPrevious == playerA (seeded)				
		playerB must be non-seeded
		
		AUTO: Create new setFixtures (or edit existing) in tennisTools (or new one in seperate seasons file). 
		Split lists into seeded and non-seeded, shuffle both, and add seeds as playerA.  
		
		MANUAL: Split list into two seperate stacks. Have playerA stack as a choice of seed only
	
	SECOND to FOURTH ROUNDS: (Players that progressed to the next round up in the previous torn, can't play eachother)
		IF playerA previousTornRoundNumber < roundNumber 
			playerA = seeded
		
		AUTO: Split lists into seeded and non-seeded, shuffle both,
		
			IF unseeded list != empty 
				playerA = seed
				playerB = unseed
			
			ELSE 
				both players = seed
		
		MANUAL: Split list into two seperate stacks. Have playerA stack as a choice of seed only
				
			IF unseeded list != empty
				playerA == seeded stack
				playerB == unseeded stack
			ELSE 
				playerA == seeded stack
				playerB == seeded stack

			 			


19
6
1
7
20
29
32
17
30
23
31
8
25
2
4
10









